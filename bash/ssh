#! /usr/bin/env bash


#ssh agent
alias lock='ssh-add -D'
alias list='ssh-add -l'

#GPG Agent running as ssh-agent
if [ -z $SSH_AUTH_SOCK ]; then
    GPG_AUTH_SOCK_FILENAME=/run/user/`id -u`/gnupg/S.gpg-agent.ssh; 
    if [ -S $GPG_AUTH_SOCK_FILENAME ] ; then
        export SSH_AUTH_SOCK=$GPG_AUTH_SOCK_FILENAME
        alias lock='echo > ~/.gnupg/sshcontrol'
    fi
fi

# auto-start keychain
#if which keychain &> /dev/null; then
#	eval `keychain --inherit any --agents ssh --quick --quiet --eval`
#fi


# bash completion for ssh config
if [ -f ~/.ssh/config ]; then
   complete -W "$(cat ~/.ssh/config 2>/dev/null | grep "Host \w" | cut -f 2 -d ' ')" ssh
   complete -W "$(cat ~/.ssh/config 2>/dev/null | grep "Host \w" | cut -f 2 -d ' ')" sshow
fi



# functions
function sshclear { if [ $1 -gt "0" ]; then REGEXP="${1}d"; sed -i".bak" $REGEXP ~/.ssh/known_hosts; fi }
if [ -d $PASSWORD_STORE_DIR/ssh ]; then
    function add {
      ssh-add <(pass ssh/$1)
  }
  complete -W "$(ls $PASSWORD_STORE_DIR/ssh/*.*sa.gpg 2>/dev/null| sed -e 's/.*\///' -e 's/.gpg$//')" add
else if [ -d $HOME/.ssh/ ]; then
  complete -W "$(ls ~/.ssh/*.*sa 2>/dev/null| sed -e 's/.*\///' | cut -f 1 -d '.')" add
  function add { 
    FILELIST="$HOME/.ssh/key.rsa"
    for ARG in $*; do
      FILELIST="$FILELIST $HOME/.ssh/$ARG.*sa";
    done
    ssh-add $FILELIST
  }
  fi
fi

function sshow {
  for ARG in $*; do
    grep -A 1 $ARG ~/.ssh/config
  done
}

#aliases



#host specific commands

# Add bash completion for ssh: it tries to complete the host to which you 
# want to connect from the list of the ones contained in ~/.ssh/known_hosts

#__ssh_known_hosts() {
#    if [[ -f ~/.ssh/known_hosts ]]; then
#        cut -d " " -f1 ~/.ssh/known_hosts | cut -d "," -f1
#    fi
#}

#_ssh() {
#    local cur known_hosts
#    COMPREPLY=()
#    cur="${COMP_WORDS[COMP_CWORD]}"
#    known_hosts="$(__ssh_known_hosts)"
#    
#    if [[ ! ${cur} == -* ]] ; then
#      COMPREPLY=( $(compgen -W "${known_hosts}" -- ${cur}) )
#        return 0
#    fi
#}

#complete -o bashdefault -o default -o nospace -F _ssh ssh 2>/dev/null \
#  || complete -o default -o nospace -F _ssh ssh
